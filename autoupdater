#!/usr/bin/env python
#########################################################################
# Name      : updater v1.00
# Creation  : 08/08/2017
# Purpose   : Auto update program scoure code
# Programmer: G Kal
# 
#
# Revision  : 09/08/2017    : Added ability to restart the machine in order
#                               the main program load correctly
#
#
#########################################################################
import os
import glob
import time
import smtplib
import datetime
import urllib2
import requests
import zipfile
import os
import filecmp


# Current version of the program
updater_version = 'Updater v1.0'
# Program to Update home directory
prg_homedir = '/home/pi/guardian/'

# URL to download the file
fromwhere = "http://www.anysite.com/anysub/"
# The files that we want to download ALWAYS the first is the main!!!!
# ALWAYS use zip files
downloadfiles = ['guard_py.zip']
realfilename = ['guard_py.py']

# Updater Program home directory
program_path = "/home/pi/guardian/"
# Updater log file name
updater_log = "update_log.txt"

# Check if we need to reboot the machine
global new_version_found

# Create the log output
def print_out(str_to_file):
    itstime = time.strftime("%a %d/%m/%Y %H:%M:%S")
    str_to_file = itstime + ' ' + str_to_file
    print str_to_file
    logfilename = program_path + updater_log 
    try:
        fh = open(logfilename,"a")
        str_to_file = str_to_file + "\n"
        fh.write(str_to_file) 
        fh.close
    except IOError as e:
        print "I/O log file error({0}): {1}".format(e.errno, e.strerror)


# Fetch the requested files
def fetch():
    global new_version_found
    new_version_found = False
    for i in range (0, len(downloadfiles)):
        st = '      Fetching ' + fromwhere+downloadfiles[i]
        s1 = fromwhere + downloadfiles[i]
        s2 = downloadfiles[i]
        r = requests.head(s1)
        status = r.status_code
        # The requested file exist? if yes, download it
        if status == 200:
            #u = urllib2.urlopen(fromwhere)
            #f = open(downloadfiles[i], 'wb')
            #meta = u.info()
            #file_size = int(meta.getheaders("Content-Length")[0])
            #print_out("Downloading: %s"+downloadfiles[i]+"Bytes: "+ file_size)
            #file_size_dl = 0
            #block_sz = 8192
            #while True:
            #    buffer = u.read(block_sz)
            #    if not buffer:
            #        break
            #    file_size_dl += len(buffer)
            #    f.write(buffer)
            #    #status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
            #    #status = status + chr(8)*(len(status)+1)
            #    #print status,
            #f.close()
            
            new_version_found = True
            print_out( "     Ok exist!")
            print_out( "     Downloading...")
            # Method 1 for downloading
            #testfile = urllib.URLopener()
            #urllib.urlretrieve(s1, s2)
            #testfile.close()
            
            # Method 2 for downloading
            zipfile = urllib2.urlopen(fromwhere+downloadfiles[i])
            with open(downloadfiles[i],'wb') as output:
                data = zipfile.read(4096)
                if data:
                    output.write(data)
                else:
                    break

            print_out( "     Done!")
        else:
            if status == 404:
                print_out( '     No new version found')
            else:
                print_out( '     Something wrong. Error :'+str(status))
            new_version_found = False

def uncompress():
    global new_version_found
    renamedfiles = []
    del renamedfiles[:]
    # Search all the real files names and rename then so we have a copy in hand
    for i in range (0,  len(realfilename)):
        my_file = prg_homedir+realfilename[i]
        # if file exists and its not brand new version rename it
        if os.path.isfile(my_file) == True:
            s = time.strftime("%m_%H_%M_%S") + realfilename[i]
            print_out('     Renaming old file to ->'+s)
            try:
                renamedfiles.append(s)
                s1 = prg_homedir + realfilename[i]
                s = prg_homedir + s
                os.system("sudo mv " + s1 + " " +s)
                
            except Exception, error_found:
                print_out("     We have an error!!!")
                print_out(str(error_found))
        else:
            print_out("     New installation of file")
            renamedfiles.append('')
    # If we have a zip file downloaded, unzip it
    for i in range (0, len(downloadfiles)):
        s = downloadfiles[i][downloadfiles[i].find('.')+1:len(downloadfiles[i])]
        if s == 'zip':
            print_out('     Unzip : '+downloadfiles[i])
            s1 = program_path + downloadfiles[i]
            zip_ref = zipfile.ZipFile(s1, 'r')
            zip_ref.extractall(prg_homedir)
            zip_ref.close()
        print_out('     Done !')
    new_version_found = False
    
    for i in range (0,  len(realfilename)):
        s1 = prg_homedir + renamedfiles[i]
        s2 = prg_homedir + realfilename[i]
        # If the files is new dont compare
        if renamedfiles[i] <> '':
            bool1 = os.path.isfile(s1) 
            bool2 = os.path.isfile(s2)
            # Check if the 2 files are the same and if they are delete the renamed
            if bool1 == True and bool2 == True:
                # Delete the zip file
                print_out("     Deleting the downloaded :" + downloadfiles[i])
                del_zip = prg_homedir + downloadfiles[i]
                os.system("sudo rm "+ del_zip)
                samefile = filecmp.cmp(s1, s2, shallow=False)
                if samefile == True:
                    print_out("Nothing new... Deleting renamed files")
                    os.system("sudo rm " + s1)
                    new_version_found = False
                else:
                    print_out("     Different version found:" + renamedfiles[i])
                    new_version_found = True
            else:
                print_out("     Something is wrong aborting")
                exit


def restart_job():
    print_out("     New version installed rebooting...")
    # This is working to kill a proccess
    #os.system("sudo pkill -9 -f "+realfilename[0])
    # This working to start a proccess but its not exit for the program
    #os.execv(sys.executable, ['python', program_path+realfilename[0]])
    print_out("===============================")
    os.system("sudo reboot now")
#############
# Main Start
#############
print_out(updater_version)

print_out("Fetching")
fetch()
print_out("Uncompress")

if new_version_found == True:
    uncompress()
print_out("Restart - Reboot")

if new_version_found == True:
    restart_job()
else:
    print_out("     Not needed")

if new_version_found == False:
    print_out("===============================")


